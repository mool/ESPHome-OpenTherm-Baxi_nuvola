substitutions:
  devicename: opentherm
  upper_devicename: Opentherm

esphome:
  name: $devicename
  includes:
    - esphome-opentherm/

esp32:
  board: esp32dev
  framework:
    type: arduino

esp32_ble_tracker:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:
logger:
api:
ota:

custom_component:
  - lambda: |-
      auto opentherm = new OpenthermComponent();
      return {opentherm};
    components:
      - id: opentherm

output:
  - platform: custom
    type: float
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      auto opentherm_pid_output = new OpenthermFloatOutput();
      openthermComp->set_pid_output(opentherm_pid_output);
      App.register_component(opentherm_pid_output);
      return {opentherm_pid_output};
    outputs:
      id: pid_output
      #min_power: 30.00%
      #max_power: 60.00%
sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->boiler_temperature,
        openthermComp->return_temperature,
        openthermComp->external_temperature_sensor,
        openthermComp->Efault_sensor,
        openthermComp->modulation_sensor,
        openthermComp->pressure_sensor,
        openthermComp->heating_target_temperature_sensor
      };
    sensors:
    - name: Boiler Temperature
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: Return Temperature
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "External Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 0
    - name: "Error"
      accuracy_decimals: 0
    - name: "Boiler Modulation"
      unit_of_measurement: "%"
      accuracy_decimals: 0
    - name: "Heating Water Pressure"
      unit_of_measurement: bar
      accuracy_decimals: 1
    - name: "Heating Target Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1

  # - platform: homeassistant
  #   id: temperature_sensor
  #   entity_id: sensor.kitchen_t
  #   name: "Actual temperature"
  #   unit_of_measurement: °C
  # - platform: template
  #   id: temperature_sensor_interval
  #   name: "Actual temperature interval"
  #   lambda: |-
  #     return id(temperature_sensor).state;
  #   update_interval: 1s

  - platform: pid
    name: "PID Climate Result"
    type: RESULT
  - platform: pid
    name: "PID Climate HEAT"
    type: HEAT
  - platform: pid
    name: "PID Climate ERROR"
    type: ERROR

  - platform: pvvx_mithermometer
    mac_address: "A4:C1:38:BC:97:AC"
    temperature:
      name: "PVVX Temperature"
      id: pvvx_temperature
    humidity:
      name: "PVVX Humidity"
    battery_level:
      name: "PVVX Battery-Level"
    battery_voltage:
      name: "PVVX Battery-Voltage"
    signal_strength:
      name: "PVVX Signal"

binary_sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->flame,
        openthermComp->diagnostic,
        openthermComp->fault
      };
    binary_sensors:
    - name: "Flame"
    - name: "Diagnostic"
    - name: "Fault"

      #device_class: heat

switch:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {openthermComp->thermostatSwitch};
    switches:
      name: "Disable PID"

button:
  - platform: template
    name: "PID Climate Autotune"
    on_press:
      - climate.pid.autotune: pid_climate

climate:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->hotWaterClimate,
        openthermComp->heatingWaterClimate
      };
    climates:
      - id: hot_water
        name: "Hot water"
      - id: heating_water
        name: "Heating water"
  - platform: pid
    id: pid_climate
    name: "PID Climate Controller"
    visual:
      min_temperature: 16 °C
      max_temperature: 28 °C
      temperature_step: 0.5 °C
    sensor: pvvx_temperature
    default_target_temperature: 20°C
    heat_output: pid_output
    control_parameters:
      kp: 0.49460
      ki: 0.00487
      kd: 12.56301
    deadband_parameters:
      threshold_high: 0.5°C
      threshold_low: -1.0°C
      kp_multiplier: 0.0   # proportional gain turned off inside deadband
      ki_multiplier: 0.05  # integral accumulates at only 5% of normal ki
      kd_multiplier: 0.0   # derviative is turned off inside deadband
      deadband_output_averaging_samples: 15   # average the output over 15 samples within the deadband

web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret web_pass
